      I was tasked with implementing a Complex number class in three different computer programming languages: Java, C++, and Python. While the task was successfully completed in each language, there were different ways to approach the task at hand. In this paper, I will be going through the process of implementing this class in these three languages and providing a conclusion as to which language I believe is superior for implementing a complex number class.
	The Java implementation of the Complex class was relatively straightforward. I had to create a simple constructor to model a complex number and create eight functions which would be responsible for doing arithmetic operations for a complex number and/or double values. I also had to override the default toString method so that when a Complex object was created the actual value it represents can be properly printed rather than the memory address of the object. Since Java doesn’t allow for operator overloading, I needed to created methods which would do the arithmetic operations to each component of a complex number, the real number component and the imaginary number component. This wasn’t a problem as I was already used to doing for coding exercises and projects related to java and had never needed to consider operator overloading.
	The C++ implementation was more tricky as my practice and exposure to C++ was only in this summer course. When looking at the implementation of the rational class in C++ that was provided to my class, I found that there were two parts needed to create this implementation: a header and class file. The header file is responsible for providing an outline of what the complex class will look like and what the requirements for operator overloading will be.  For the header file, I outlined that there are 3 configurations for operator overloading: complex X complex, complex X int, and int X complex. I also had to outline an ostream function to print a complex number correctly. The class file was responsible for the actual implementation of the outline provided by the header file. Filling out the complex X complex and complex X int operators followed the same logic as my Java code. Int X complex gave some trouble for the subtraction and division operator overloading  but that fixed by defining the default values of the formal parameters in the header file. The ostream function was also easy to implement as it followed the same structure as the toString but replacing System.out.println with cout << endl.
	The Python implementation felt like it had the most work behind it. While Python does support operator overloading it achieves this by using methods. You must specify the methods of the operator you wish to overload and then provide more overloading for doing an operation on the right hand side. The division operator had to be overloaded using a function called truediv which I found less straightforward than the C++ approach to overloading. It wasn’t too much work to bring the code structure from Java and C++ into Python.
	My verdict on which language I deem superior will have to start with what language I immediately disqualify. I disqualify python for a multitude of reasons which are that it’s approach to operator overloading while providing the same results as C++ tends at a first glance to be more confusing on how it is implemented when the complex class is being used, I have always found self to be weird, that constructors need two underscores before and after the name of the constructor, and the parameters of isinstance felt very unpythonic. With Python out of the way , it leaves two languages left, Java and C++.  In a close call I declare Java my winner. The reason being is that writing in Java was simple and compared to C++ didn’t require a header file. Writing a header and C++ file felt as if I was writing two incomplete classes to make one functional class. I do like the operator overloading that C++ includes but it makes no difference when printing out the file except for when doing double X complex. While double X cpmplex wasn’t a requirement for Java I feel that it could be implemented given enough time. Java was also more straightforward to compile while C++ gave me errors galore. So as a concise conclusion Java is the superior language because it serves as a happy medium between C++ and Python. It uses methods to preform the operations like python, has type checking which makes sense unlike Python, only requires to write one complete class unlike C++, easy to read, and was very easy to compile.
